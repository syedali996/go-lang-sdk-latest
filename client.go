/*
Package pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package pagarmeapisdk

import (
    "context"
    "github.com/apimatic/go-core-runtime/https"
    "github.com/apimatic/go-core-runtime/utilities"
    "net/http"
)

// Client is an interface representing the main client for accessing configuration and controllers.
type ClientInterface interface {
    Configuration() *Configuration
    SubscriptionsController() *SubscriptionsController
    OrdersController() *OrdersController
    PlansController() *PlansController
    InvoicesController() *InvoicesController
    CustomersController() *CustomersController
    ChargesController() *ChargesController
    RecipientsController() *RecipientsController
    TokensController() *TokensController
    TransactionsController() *TransactionsController
    TransfersController() *TransfersController
    UserAgent() *string
}

// client is an implementation of the Client interface.
type client struct {
    callBuilderFactory      https.CallBuilderFactory
    configuration           Configuration
    userAgent               string
    subscriptionsController SubscriptionsController
    ordersController        OrdersController
    plansController         PlansController
    invoicesController      InvoicesController
    customersController     CustomersController
    chargesController       ChargesController
    recipientsController    RecipientsController
    tokensController        TokensController
    transactionsController  TransactionsController
    transfersController     TransfersController
}

// NewClient is the constructor for creating a new client instance.
// It takes a Configuration object as a parameter and returns the Client interface.
func NewClient(configuration Configuration) ClientInterface {
    client := &client{
        configuration: configuration,
    }
    
    client.userAgent = utilities.UpdateUserAgent("PagarmeApiSDK - Go 6.7.2")
    client.callBuilderFactory = callBuilderHandler(
    	func(server string) string {
    		if server == "" {
    			server = "default"
    		}
    		return getBaseUri(Server(server), client.configuration)
    	},
    	BasicAuthentication(configuration),
    	https.NewHttpClient(configuration.HttpConfiguration()),
    	configuration.httpConfiguration.RetryConfiguration(),
        withUserAgent(client.userAgent),
    )
    
    baseController := NewBaseController(client)
    client.subscriptionsController = *NewSubscriptionsController(*baseController)
    client.ordersController = *NewOrdersController(*baseController)
    client.plansController = *NewPlansController(*baseController)
    client.invoicesController = *NewInvoicesController(*baseController)
    client.customersController = *NewCustomersController(*baseController)
    client.chargesController = *NewChargesController(*baseController)
    client.recipientsController = *NewRecipientsController(*baseController)
    client.tokensController = *NewTokensController(*baseController)
    client.transactionsController = *NewTransactionsController(*baseController)
    client.transfersController = *NewTransfersController(*baseController)
    return client
}

// Configuration returns the configuration instance of the client.
func (c *client) Configuration() *Configuration {
    return &c.configuration
}

// SubscriptionsController returns the subscriptionsController instance of the client.
func (c *client) SubscriptionsController() *SubscriptionsController {
    return &c.subscriptionsController
}

// OrdersController returns the ordersController instance of the client.
func (c *client) OrdersController() *OrdersController {
    return &c.ordersController
}

// PlansController returns the plansController instance of the client.
func (c *client) PlansController() *PlansController {
    return &c.plansController
}

// InvoicesController returns the invoicesController instance of the client.
func (c *client) InvoicesController() *InvoicesController {
    return &c.invoicesController
}

// CustomersController returns the customersController instance of the client.
func (c *client) CustomersController() *CustomersController {
    return &c.customersController
}

// ChargesController returns the chargesController instance of the client.
func (c *client) ChargesController() *ChargesController {
    return &c.chargesController
}

// RecipientsController returns the recipientsController instance of the client.
func (c *client) RecipientsController() *RecipientsController {
    return &c.recipientsController
}

// TokensController returns the tokensController instance of the client.
func (c *client) TokensController() *TokensController {
    return &c.tokensController
}

// TransactionsController returns the transactionsController instance of the client.
func (c *client) TransactionsController() *TransactionsController {
    return &c.transactionsController
}

// TransfersController returns the transfersController instance of the client.
func (c *client) TransfersController() *TransfersController {
    return &c.transfersController
}

// UserAgent returns the userAgent instance of the client.
func (c *client) UserAgent() *string {
    return &c.userAgent
}

// GetCallBuilder returns the CallBuilderFactory used by the client.
func (c *client) GetCallBuilder() https.CallBuilderFactory {
    return c.callBuilderFactory
}

// getBaseUri returns the base URI based on the server and configuration.
func getBaseUri(
    server Server,
    configuration Configuration) string {
    if configuration.Environment() == Environment(PRODUCTION) {
        if server == Server(ENUMDEFAULT) {
            return "https://api.pagar.me/core/v5"
        }
    }
    return "TODO: Select a valid server."
}

// clientOptions is a function type representing options for the client.
type clientOptions func(cb https.CallBuilder)

// callBuilderHandler creates the call builder factory with various options.
func callBuilderHandler(
    baseUrlProvider func(server string) string,
    auth https.Authenticator,
    httpClient https.HttpClient,
    retryConfig RetryConfiguration,
    opts ...clientOptions) https.CallBuilderFactory {
    callBuilderFactory := https.CreateCallBuilderFactory(baseUrlProvider, auth, httpClient, retryConfig)
    return tap(callBuilderFactory, opts...)
}

// tap is a utility function to apply client options to the call builder factory.
func tap(
    callBuilderFactory https.CallBuilderFactory,
    opts ...clientOptions) https.CallBuilderFactory {
    return func(ctx context.Context, httpMethod, path string) https.CallBuilder {
    	callBuilder := callBuilderFactory(ctx, httpMethod, path)
    	for _, opt := range opts {
    		opt(callBuilder)
    	}
    	return callBuilder
    }
}

// withUserAgent is an option to add a user agent header to the HTTP request.
func withUserAgent(userAgent string) clientOptions {
    f := func(request *http.Request) *http.Request {
    	request.Header.Add("user-agent", userAgent)
    	return request
    }
    return func(cb https.CallBuilder) {
    	cb.InterceptRequest(f)
    }
}
